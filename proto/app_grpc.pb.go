// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/app.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SegmentServiceClient is the client API for SegmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SegmentServiceClient interface {
	StoreUserSegmantation(ctx context.Context, in *UserSegmantRequest, opts ...grpc.CallOption) (*UserSegmantResponse, error)
	ShowUserInSegmant(ctx context.Context, in *SegmantRequest, opts ...grpc.CallOption) (*SegmantResponse, error)
	Estimate(ctx context.Context, in *SegmantRequest, opts ...grpc.CallOption) (*EstimateResponse, error)
}

type segmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSegmentServiceClient(cc grpc.ClientConnInterface) SegmentServiceClient {
	return &segmentServiceClient{cc}
}

func (c *segmentServiceClient) StoreUserSegmantation(ctx context.Context, in *UserSegmantRequest, opts ...grpc.CallOption) (*UserSegmantResponse, error) {
	out := new(UserSegmantResponse)
	err := c.cc.Invoke(ctx, "/proto.SegmentService/StoreUserSegmantation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentServiceClient) ShowUserInSegmant(ctx context.Context, in *SegmantRequest, opts ...grpc.CallOption) (*SegmantResponse, error) {
	out := new(SegmantResponse)
	err := c.cc.Invoke(ctx, "/proto.SegmentService/ShowUserInSegmant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentServiceClient) Estimate(ctx context.Context, in *SegmantRequest, opts ...grpc.CallOption) (*EstimateResponse, error) {
	out := new(EstimateResponse)
	err := c.cc.Invoke(ctx, "/proto.SegmentService/Estimate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SegmentServiceServer is the server API for SegmentService service.
// All implementations must embed UnimplementedSegmentServiceServer
// for forward compatibility
type SegmentServiceServer interface {
	StoreUserSegmantation(context.Context, *UserSegmantRequest) (*UserSegmantResponse, error)
	ShowUserInSegmant(context.Context, *SegmantRequest) (*SegmantResponse, error)
	Estimate(context.Context, *SegmantRequest) (*EstimateResponse, error)
	// mustEmbedUnimplementedSegmentServiceServer()
}

// UnimplementedSegmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSegmentServiceServer struct {
}

func (UnimplementedSegmentServiceServer) StoreUserSegmantation(context.Context, *UserSegmantRequest) (*UserSegmantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreUserSegmantation not implemented")
}
func (UnimplementedSegmentServiceServer) ShowUserInSegmant(context.Context, *SegmantRequest) (*SegmantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowUserInSegmant not implemented")
}
func (UnimplementedSegmentServiceServer) Estimate(context.Context, *SegmantRequest) (*EstimateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Estimate not implemented")
}
func (UnimplementedSegmentServiceServer) mustEmbedUnimplementedSegmentServiceServer() {}

// UnsafeSegmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SegmentServiceServer will
// result in compilation errors.
type UnsafeSegmentServiceServer interface {
	mustEmbedUnimplementedSegmentServiceServer()
}

func RegisterSegmentServiceServer(s grpc.ServiceRegistrar, srv SegmentServiceServer) {
	s.RegisterService(&SegmentService_ServiceDesc, srv)
}

func _SegmentService_StoreUserSegmantation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSegmantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentServiceServer).StoreUserSegmantation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SegmentService/StoreUserSegmantation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentServiceServer).StoreUserSegmantation(ctx, req.(*UserSegmantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentService_ShowUserInSegmant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SegmantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentServiceServer).ShowUserInSegmant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SegmentService/ShowUserInSegmant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentServiceServer).ShowUserInSegmant(ctx, req.(*SegmantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentService_Estimate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SegmantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentServiceServer).Estimate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SegmentService/Estimate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentServiceServer).Estimate(ctx, req.(*SegmantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SegmentService_ServiceDesc is the grpc.ServiceDesc for SegmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SegmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SegmentService",
	HandlerType: (*SegmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreUserSegmantation",
			Handler:    _SegmentService_StoreUserSegmantation_Handler,
		},
		{
			MethodName: "ShowUserInSegmant",
			Handler:    _SegmentService_ShowUserInSegmant_Handler,
		},
		{
			MethodName: "Estimate",
			Handler:    _SegmentService_Estimate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/app.proto",
}
